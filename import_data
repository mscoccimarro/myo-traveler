#!/usr/bin/perl
use strict;
use warnings;

use Math::Trig;
use POSIX;

my $pi = 3.14159265358979323846;
my $radius = 6378.137;

sub Distance {
  my ($lat1, $lon1, $lat2, $lon2, $unit) = @_;

  $lat1 = deg2rad($lat1);
  $lon1 = deg2rad($lon1);
  $lat2 = deg2rad($lat2);
  $lon2 = deg2rad($lon2);
  my $dlon = $lon1 - $lon2;

  my $distance = acos (sin($lat1) * sin($lat2) + cos($lat1) * cos($lat2) *
      cos($dlon)) * $radius;

  if ($unit eq "K") {
    return $distance;
  } elsif ($unit eq "M") {
    return ($distance * 0.621371192);
  } elsif ($unit eq "N") {
    return ($distance * 0.539956803);
  } else { 
    return 0;
  }
}

## Parse capitals data
my $firstline = 1;
my $path = "data/";
my $filename = $path."continent_capitals.csv";
my %continents;

open( my $in, "<", $filename ) || die "$0: Can't open $filename for reading: $!";

while( my $line = <$in> ) {
## Skip label line
  if( $firstline ) {
    $firstline = 0;
    next;
  }

## Remove whitespace
  $line =~ s/\s*\z//;
  my ( $con, $co, $cy, $lat, $lon ) = split /,/, $line;

  $continents{ $con }{ $co }{ $cy }{ 'lat' } = $lat;
  $continents{ $con }{ $co }{ $cy }{ 'lon' } = $lon;
}
close $in || die "$filename: $!";

=pod
## Show all data
foreach my $key ( keys %continents ) {
  foreach my $ckey ( keys %{$continents{ $key }} ) {
    foreach my $cykey ( keys %{$continents{ $key }{ $ckey }} ) {
      print $key."{ ".$ckey." }{ ".$cykey." } : Latitude = ".$continents{ $key }{ $ckey }{ $cykey }{ 'lat' }."\n";
      print $key."{ ".$ckey." }{ ".$cykey." } : Longitude = ".$continents{ $key }{ $ckey }{ $cykey }{ 'lon' }."\n";
    }
  }
}
=cut
=pod
## Show one continent data
my $continent = "South America";
print "###\t$continent\t###\n";
foreach my $country ( keys %{$continents{ $continent }} ) {
  foreach my $city ( keys %{$continents{ $continent }{ $country }} ) {
    print $country."{ ".$city." } : Latitude = ".$continents{ $continent }{ $country }{ $city }{ 'lat' }."\n";
    print $country."{ ".$city." } : Longitude = ".$continents{ $continent }{ $country }{ $city }{ 'lon' }."\n";
  }
}
=cut

sub computeDistances {
  my ( %continent ) = @_;
  my %cities;
  foreach my $country ( keys %continent ) {
    foreach my $country2 ( keys %continent ) {
      next if $country eq $country2;
      foreach my $city ( keys %{$continent{ $country }} ) {
	foreach my $city2 ( keys %{$continent{ $country2 }} ) {
	  next if $city eq $city2;
	  my $lat1 = $continent{ $country }{ $city }{ 'lat' };
	  my $lon1 = $continent{ $country }{ $city }{ 'lon' };
	  my $lat2 = $continent{ $country2 }{ $city2 }{ 'lat' };
	  my $lon2 = $continent{ $country2 }{ $city2 }{ 'lon' };
	  my $dist = Distance($lat1, $lon1, $lat2, $lon2, "K");
	  $cities{ $city }{ $city2 } = $dist;
#	  print "Distancia entre $city y $city2 = ".$dist."\n";
	}
      }
    }
  }

  return %cities;
}

my @visitedCities;

## Return true if city was already visited, false on the other case
sub visited {
  my ( $city ) = @_;

  foreach my $visited ( @visitedCities ) {
    return 1 if $city eq $visited;
  }
  
  return 0;
}

my $startingDate = "2017-01-01";
my $kmTraveled = 0;
my $days = 0;

## Get closest city
sub computeClosestCity {
  my ( $currentCity, %distances ) = @_;

  my $lowestDistance = 999999;
  my $closestCity = "";
  if( visited( "Asunción" ) && !visited( "Brasília" ) ) {
    $closestCity = "Brasília";
    $lowestDistance = $distances{ "Asunción" }{ "Brasília" };
  } else {
    foreach my $city ( keys %{$distances{ $currentCity }} ) {
      next if visited( $city );
      my $currentDistance = $distances{ $currentCity }{ $city };
      if( $currentDistance < $lowestDistance ) {
	$lowestDistance = $currentDistance;
	$closestCity = $city;
      }
    }
  }
  
  ## Stayed a week on the capital
  $days += 7;
  $kmTraveled += $lowestDistance;

  ## Current Date 
  my $currentDate = `date +"%d/%m/%Y" -d "$startingDate + $days day"`;
  $startingDate = `date +"%Y-%m-%d" -d "$startingDate + $days day"`;
  chomp( $startingDate );
  chomp( $currentDate );

  $days = 0;

  my $mod = floor( $kmTraveled / 3000 );
  if( $mod > 0 ) {
    $kmTraveled -= 3000*$mod;
    ## Rest five days on the next capital
    $days += 5*$mod;
  }

  push( @visitedCities, $currentCity );
  push( @visitedCities, $closestCity );

  return ( $closestCity, $lowestDistance, $currentDate );
}

## Compute city which has lowest latitude
sub computeSouthernCity {
  my ( %continent ) = @_;
  my $southernCity = "";
  my $lowestLatitude = 999;
  foreach my $country ( keys %continent ) {
    foreach my $city ( keys %{$continent{ $country }} ) {
      my $currentLatitude = $continent{ $country }{ $city }{ 'lat' };
      if( $currentLatitude < $lowestLatitude ) {
	$lowestLatitude = $currentLatitude;
	$southernCity = $city;
      }
    }
  }

  return $southernCity;
}

sub deleteCity {
  my ( $selectedCity, %continent ) = @_;

  foreach my $country ( keys %continent ) {
    foreach my $city ( keys %{$continent{ $country }} ) {
      if( $city eq $selectedCity ) {
	delete $continent{ $country }{ $city };
	last;
      }
    }
  }
}

## Compute best capital travel path based on lowest distance
sub computeBestPath {
  my ( %continent ) = @_;

  my $cityCount = keys %continent;
  my $startingCity = computeSouthernCity( %continent );
  my $currentCity = $startingCity;

  my %distances = computeDistances( %continent );

  deleteCity( $currentCity, %continent );
  $cityCount -= 1;

  my $totalDistance = 0;
  for( my $i = 0; $i < $cityCount; $i++ ) {
    my ( $nextCity, $dist, $currentDate ) = computeClosestCity( $currentCity, %distances );
    print "\"$currentCity\"  ==>  \"$nextCity\"  ( ".floor($dist)." KM )  Fecha de llegada: $currentDate\n";
    $currentCity = $nextCity;
    $totalDistance += $dist;
  }
  print "\"$currentCity\"  ==>  \"$startingCity\"  ( ".floor($distances{ $currentCity }{ $startingCity })." KM )\n";
  print "\nDISTANCIA TOTAL RECORRIDA: ".floor( $totalDistance )." KM\n";

  return $totalDistance;
}

my @sc = ( "South America", "North America", "Europe", "Africa", "Asia", "Oceania" );
my $totalDistTraveled = 0;

foreach my $scContinent ( @sc ) {
  print "\n#####################################\n";
  print "\t$scContinent\n"; 
  print "#####################################\n\n";
  ## Get best path, distance based
  $totalDistTraveled += computeBestPath( %{$continents{ $scContinent }} );
  $startingDate = "2017-01-01";
}

print "\n#########################################################\n";
print "DISTANCIA TOTAL RECORRIDA POR TODOS LOS EQUIPOS: ".floor( $totalDistTraveled )." KM\n";
